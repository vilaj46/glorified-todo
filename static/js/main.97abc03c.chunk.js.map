{"version":3,"sources":["components/ProfilePage/Biography/Biography.module.css","components/TodoItems/TodoItems.module.css","components/AddTodoForm/AddTodoForm.module.css","svgs/avatar.svg","svgs/check.svg","svgs/x.svg","svgs/checkComplete.svg","svgs/xComplete.svg","components/ProfilePage/ProfilePage.module.css","svgs/envelope.svg","components/AuthenticationPage/AuthenticationPage.module.css","svgs/company.svg","svgs/location.svg","svgs/website.svg","svgs/twitter.svg","svgs/auth_problem.svg","svgs/show_password.svg","svgs/hide_password.svg","components/App/App.module.css","components/TodoItems/DragTypes.js","components/TodoItems/TodoItem.js","components/TodoItems/TodoItems.js","components/ProfilePage/Biography/helpers/EmailInput.js","components/ProfilePage/Biography/helpers/BioTextArea.js","components/ProfilePage/Biography/helpers/BioStringInput.js","components/ProfilePage/Biography/helpers/EditProfileButton.js","api.js","components/ProfilePage/Biography/funcs/save.js","components/ProfilePage/Biography/funcs/cancel.js","components/ProfilePage/Biography/Biography.js","components/ProfilePage/ProfilePage.js","components/AuthenticationPage/funcs/emphasize.js","components/AuthenticationPage/funcs/login.js","components/AuthenticationPage/funcs/signup.js","components/AuthenticationPage/helpers/LoginButton.js","components/AuthenticationPage/helpers/UsernameText.js","components/AuthenticationPage/helpers/EmailText.js","components/AuthenticationPage/helpers/PasswordText.js","components/AuthenticationPage/helpers/ErrorSVG.js","components/AuthenticationPage/helpers/PasswordVisibilityButton.js","components/AuthenticationPage/AuthenticationPage.js","components/Header/helpers/SignupButton.js","components/Header/helpers/LogButton.js","components/Header/helpers/ProfileButton.js","components/Header/Header.js","components/AddTodoForm/AddTodoForm.js","components/App/App.js","components/hooks/useTodos.js","components/hooks/useAuthentication.js","index.js"],"names":["module","exports","TodoItem","item","index","completeTodo","removeTodo","swapTodoItems","useDrag","type","DragTypes","data","collect","monitor","isDragging","drag","useDrop","accept","drop","itemBeingDragged","checkImg","completed","checkComplete","check","xImg","xComplete","x","data-testid","IDNumber","className","styles","li","onClick","ref","span","src","alt","show","hide","p","todo","remove","e","stopPropagation","removeHelper","TodoItems","todos","DndProvider","backend","HTML5Backend","ul","map","key","EmailInput","email","visibleEmails","setEmailText","InputGroup","Prepend","envelope","Text","id","title","DropdownButton","as","variant","dropdown","Dropdown","Item","href","blankEmail","choice","BioTextArea","bio","setBioText","Form","Group","controlId","Control","rows","placeholder","value","onChange","target","BioStringInput","icon","localKey","keyValue","setProfileKey","toLowerCase","companySVG","locationSVG","websiteSVG","twitterSVG","size","bioIconContainer","FormControl","aria-label","aria-describedby","bioStringInput","EditProfileButton","setDisplayBioInputs","Button","editButton","api","jwt","users","username","password","profilePic","avatar","company","location","visibleEmail","website","twitter","login","i","length","potentialUser","checkPW","currentPW","actualPW","signup","newUser","User","newUserToJson","Object","keys","forEach","k","push","updateProfile","values","save","cancel","hooks","hook","action","Biography","authentication","displayBioInputs","useState","bioText","companyText","setCompanyText","locationText","setLocationText","emailText","websiteText","setWebsiteText","twitterText","setTwitterText","style","minWidth","maxWidth","ProfilePage","profilePage","time","setLastClicked","usernameMessage","lastClicked","Date","now","element","document","getElementById","emailId","classList","add","bold","setTimeout","passwordMessage","prevMessage","usernameId","emailMessage","passwordId","credentials","actions","state","trim","setUsernameError","setPasswordError","setUsernameMessage","emphasize","setPasswordMessage","response","setToken","history","setEmailError","setEmailMessage","includes","LoginButton","page","buttonStyle","loginButton","signupButton","buttonText","UsernameText","usernameError","messages","blankUsernameMessage","textError","to","boldError","EmailText","emailError","PasswordText","passwordError","ErrorSVG","error","authProblem","PasswordVisibilityButton","displayPassword","setDisplayPassword","showPW1","showPW2","hidePassword","showPassword","AuthenticationPage","setUsername","setPassword","setEmail","undefined","prevPage","setPrevPage","useHistory","Jumbotron","form","onSubmit","preventDefault","relative","pathname","autoComplete","SignupButton","button","LogButton","isAuthenticated","link","ProfileButton","profile","width","height","profileText","Header","header","nav","linksContainer","items","profileContainer","AddTodoForm","addTodo","setValue","showWarning","setShowWarning","Math","random","warningDisplay","display","input","buttonContainer","warning","App","setTodos","text","searchedIndex","splice","item1","item2","newItem1","newItem2","useTodos","token","setAuthentication","newAuthentication","currentAuthValue","futureAuthValue","useAuthentication","fixedPadding","top","path","exact","render","ReactDOM","StrictMode","component"],"mappings":"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","file":"static/js/main.97abc03c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"username\":\"Biography_username__1gwVI\",\"bioStringInput\":\"Biography_bioStringInput__2Q_7U\",\"bioIconContainer\":\"Biography_bioIconContainer__seqpC\",\"profilePic\":\"Biography_profilePic__OihXm\",\"save\":\"Biography_save__3x90x\",\"cancel\":\"Biography_cancel__3bfOQ\",\"editButton\":\"Biography_editButton__3EglE\",\"envelope\":\"Biography_envelope__1Ve9B\",\"dropdown\":\"Biography_dropdown__ePOqG\",\"blankEmail\":\"Biography_blankEmail__5OX1X\",\"choice\":\"Biography_choice__IGx2I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"TodoItems_li__2-lRF\",\"remove\":\"TodoItems_remove__32wHd\",\"p\":\"TodoItems_p__1w0JM\",\"span\":\"TodoItems_span__JnKXm\",\"completed\":\"TodoItems_completed__2NGOB\",\"x\":\"TodoItems_x__3B87g\",\"check\":\"TodoItems_check__39fw3\",\"hide\":\"TodoItems_hide__2i1oK\",\"show\":\"TodoItems_show__L3zqR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddTodoForm_form__18_kb\",\"input\":\"AddTodoForm_input__crQzW\",\"buttonContainer\":\"AddTodoForm_buttonContainer__2a-jz\",\"button\":\"AddTodoForm_button__1Sb4-\",\"warning\":\"AddTodoForm_warning__28cyb\",\"display\":\"AddTodoForm_display__2MHQo\",\"hide\":\"AddTodoForm_hide__37pnf\"};","module.exports = __webpack_public_path__ + \"static/media/avatar.4894c98f.svg\";","module.exports = __webpack_public_path__ + \"static/media/check.7812c5ab.svg\";","module.exports = __webpack_public_path__ + \"static/media/x.2329a60d.svg\";","module.exports = __webpack_public_path__ + \"static/media/checkComplete.c4e37bc8.svg\";","module.exports = __webpack_public_path__ + \"static/media/xComplete.4a74a651.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePage\":\"ProfilePage_profilePage__3x5t8\"};","module.exports = __webpack_public_path__ + \"static/media/envelope.f38c166d.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AuthenticationPage_form__1b20b\",\"error\":\"AuthenticationPage_error__1L5TW\",\"textError\":\"AuthenticationPage_textError__3YLKQ\",\"boldError\":\"AuthenticationPage_boldError__2vYjL\",\"loginButton\":\"AuthenticationPage_loginButton__1BJ_W\",\"signupButton\":\"AuthenticationPage_signupButton__1jHiB\",\"relative\":\"AuthenticationPage_relative__eW08L\",\"authProblem\":\"AuthenticationPage_authProblem__3hqEZ\",\"showPW1\":\"AuthenticationPage_showPW1__oVYMD\",\"showPW2\":\"AuthenticationPage_showPW2__3tuDI\",\"bold\":\"AuthenticationPage_bold__3jDsD\",\"blankUsernameMessage\":\"AuthenticationPage_blankUsernameMessage__1GLvc\"};","module.exports = __webpack_public_path__ + \"static/media/company.8d611e64.svg\";","module.exports = __webpack_public_path__ + \"static/media/location.9c69d282.svg\";","module.exports = __webpack_public_path__ + \"static/media/website.a45c1559.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.b48524a2.svg\";","module.exports = __webpack_public_path__ + \"static/media/auth_problem.2a5a1bfc.svg\";","module.exports = __webpack_public_path__ + \"static/media/show_password.e4b464d9.svg\";","module.exports = __webpack_public_path__ + \"static/media/hide_password.dbd11928.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fixedPadding\":\"App_fixedPadding__T7ge5\",\"top\":\"App_top__3pCvB\",\"header\":\"App_header__3U4th\",\"linksContainer\":\"App_linksContainer__1mKK6\",\"profileContainer\":\"App_profileContainer__30Su3\",\"profile\":\"App_profile__2AjTg\",\"button\":\"App_button__rTWOv\",\"nav\":\"App_nav__hBOJb\",\"items\":\"App_items__2CIgw\",\"profileText\":\"App_profileText__3-xyU\",\"profilePic\":\"App_profilePic__3TXLe\",\"width\":\"App_width__2soKE\"};","export default {\r\n  TODO_ITEM: \"TODO_ITEM\",\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\n\r\nimport styles from \"./TodoItems.module.css\";\r\n\r\nimport check from \"../../svgs/check.svg\";\r\nimport x from \"../../svgs/x.svg\";\r\n\r\nimport checkComplete from \"../../svgs/checkComplete.svg\";\r\nimport xComplete from \"../../svgs/xComplete.svg\";\r\n\r\nimport DragTypes from \"./DragTypes.js\";\r\n\r\nconst TodoItem = ({ item, index, completeTodo, removeTodo, swapTodoItems }) => {\r\n  /**\r\n   * removeHelper\r\n   *\r\n   * @param {Object} e - Event object.\r\n   *\r\n   * We need to stop bubbling up because it was just triggering\r\n   * the complete item action.\r\n   */\r\n  const removeHelper = (e) => {\r\n    e.stopPropagation();\r\n    removeTodo({ ...item, index });\r\n  };\r\n\r\n  const [, drag] = useDrag({\r\n    item: { type: DragTypes.TODO_ITEM, data: { ...item, index } },\r\n    collect: (monitor) => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  const [, drop] = useDrop({\r\n    accept: DragTypes.TODO_ITEM,\r\n    drop: (itemBeingDragged) => {\r\n      swapTodoItems(itemBeingDragged.data, { ...item, index });\r\n    },\r\n  });\r\n\r\n  const checkImg = item.completed ? checkComplete : check;\r\n  const xImg = item.completed ? xComplete : x;\r\n\r\n  return (\r\n    <li\r\n      data-testid={item.IDNumber}\r\n      className={`${styles.li} ${item.completed ? styles.completed : \"\"}`}\r\n      onClick={() => completeTodo({ ...item, index })}\r\n      ref={drag}\r\n    >\r\n      <span className={styles.span}>\r\n        <img\r\n          src={checkImg}\r\n          alt=\"Completed!\"\r\n          className={`${styles.check} ${\r\n            item.completed ? styles.show : styles.hide\r\n          }`}\r\n        />\r\n      </span>\r\n      <p className={styles.p} ref={drop}>\r\n        {item.todo}\r\n      </p>\r\n      <button\r\n        type=\"button\"\r\n        data-testid={`${item.IDNumber}-button`}\r\n        className={`${styles.span} ${styles.remove} ${\r\n          item.completed ? styles.completed : \"\"\r\n        }`}\r\n        onClick={(e) => removeHelper(e)}\r\n      >\r\n        <img src={xImg} alt=\"Remove\" className={styles.x} />\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nTodoItem.propTypes = {\r\n  item: PropTypes.shape({\r\n    todo: PropTypes.string.isRequired,\r\n    IDNumber: PropTypes.string.isRequired,\r\n    completed: PropTypes.bool.isRequired,\r\n  }).isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  completeTodo: PropTypes.func.isRequired,\r\n  removeTodo: PropTypes.func.isRequired,\r\n  swapTodoItems: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nimport styles from \"./TodoItems.module.css\";\r\n\r\nconst TodoItems = ({ todos, completeTodo, removeTodo, swapTodoItems }) => {\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <ul className={styles.ul}>\r\n        {todos.map((item, index) => {\r\n          return (\r\n            <TodoItem\r\n              item={item}\r\n              key={item.IDNumber}\r\n              index={index}\r\n              completeTodo={completeTodo}\r\n              removeTodo={removeTodo}\r\n              swapTodoItems={swapTodoItems}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    </DndProvider>\r\n  );\r\n};\r\n\r\nTodoItems.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  completeTodo: PropTypes.func.isRequired,\r\n  removeTodo: PropTypes.func.isRequired,\r\n  swapTodoItems: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TodoItems;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\n\r\nimport envelope from \"../../../../svgs/envelope.svg\";\r\n\r\nimport styles from \"../Biography.module.css\";\r\n\r\nconst EmailInput = ({ email, visibleEmails, setEmailText }) => {\r\n  return (\r\n    <InputGroup className=\"mb-3\">\r\n      <InputGroup.Prepend className={styles.envelope}>\r\n        <InputGroup.Text id=\"inputGroup-sizing-sm\">\r\n          <img src={envelope} alt=\"Email\" title=\"Email\" />\r\n        </InputGroup.Text>\r\n      </InputGroup.Prepend>\r\n      <DropdownButton\r\n        as={InputGroup.Prepend}\r\n        variant=\"outline-secondary\"\r\n        title={email || \" \"}\r\n        className={styles.dropdown}\r\n      >\r\n        <Dropdown.Item\r\n          href=\"#\"\r\n          className={styles.blankEmail}\r\n          onClick={() => setEmailText(\" \")}\r\n        >\r\n          Leave Blank\r\n        </Dropdown.Item>\r\n        {visibleEmails.map((email) => {\r\n          return (\r\n            <Dropdown.Item\r\n              href=\"#\"\r\n              className={styles.choice}\r\n              onClick={() => setEmailText(email)}\r\n              key={email}\r\n            >\r\n              {email}\r\n            </Dropdown.Item>\r\n          );\r\n        })}\r\n      </DropdownButton>\r\n    </InputGroup>\r\n  );\r\n};\r\n\r\nEmailInput.propTypes = {\r\n  email: PropTypes.string.isRequired,\r\n  visibleEmails: PropTypes.array.isRequired,\r\n  setEmailText: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default EmailInput;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nconst BioTextArea = ({ bio, setBioText }) => {\r\n  return (\r\n    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n      <Form.Control\r\n        as=\"textarea\"\r\n        rows={3}\r\n        placeholder=\"Add a bio\"\r\n        value={bio}\r\n        onChange={(e) => setBioText(e.target.value)}\r\n      />\r\n    </Form.Group>\r\n  );\r\n};\r\n\r\nBioTextArea.propTypes = {\r\n  bio: PropTypes.string.isRequired,\r\n  setBioText: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default BioTextArea;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\n\r\nimport companySVG from \"../../../../svgs/company.svg\";\r\nimport locationSVG from \"../../../../svgs/location.svg\";\r\nimport websiteSVG from \"../../../../svgs/website.svg\";\r\nimport twitterSVG from \"../../../../svgs/twitter.svg\";\r\n\r\nimport styles from \"../Biography.module.css\";\r\n\r\nconst BioStringInput = ({ localKey, keyValue, setProfileKey }) => {\r\n  let icon;\r\n\r\n  const loweredLocalKey = localKey.toLowerCase();\r\n  switch (loweredLocalKey) {\r\n    case \"company\":\r\n      icon = companySVG;\r\n      break;\r\n    case \"location\":\r\n      icon = locationSVG;\r\n      break;\r\n    case \"website\":\r\n      icon = websiteSVG;\r\n      break;\r\n    default:\r\n      icon = twitterSVG;\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <InputGroup size=\"sm\" className=\"mb-3\">\r\n      <InputGroup.Prepend>\r\n        <InputGroup.Text\r\n          id=\"inputGroup-sizing-sm\"\r\n          className={styles.bioIconContainer}\r\n        >\r\n          <img src={icon} alt={localKey} title={localKey} />\r\n        </InputGroup.Text>\r\n      </InputGroup.Prepend>\r\n      <FormControl\r\n        aria-label=\"Small\"\r\n        aria-describedby=\"inputGroup-sizing-sm\"\r\n        onChange={(e) => setProfileKey(e.target.value)}\r\n        value={keyValue}\r\n        className={styles.bioStringInput}\r\n        placeholder={localKey}\r\n      />\r\n    </InputGroup>\r\n  );\r\n};\r\n\r\nBioStringInput.propTypes = {\r\n  localKey: PropTypes.string.isRequired,\r\n  keyValue: PropTypes.string.isRequired,\r\n  setProfileKey: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default BioStringInput;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport styles from \"../Biography.module.css\";\r\n\r\nconst EditProfileButton = ({ setDisplayBioInputs }) => {\r\n  return (\r\n    <Button\r\n      type=\"button\"\r\n      className={styles.editButton}\r\n      onClick={() => setDisplayBioInputs(true)}\r\n    >\r\n      Edit Profile\r\n    </Button>\r\n  );\r\n};\r\n\r\nEditProfileButton.propTypes = {\r\n  setDisplayBioInputs: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default EditProfileButton;\r\n","import avatar from \"./svgs/avatar.svg\";\r\n\r\nconst User = (username, password) => ({\r\n  username: username,\r\n  password: password,\r\n  profilePic: avatar,\r\n  bio: \"\",\r\n  company: \"\",\r\n  location: \"\",\r\n  email: \"\",\r\n  website: \"\",\r\n  twitter: \"\",\r\n});\r\n\r\nconst api = {\r\n  jwt: \"12345\",\r\n  users: [\r\n    {\r\n      username: \"vilaj46\",\r\n      password: \"georgia46\",\r\n      profilePic: avatar,\r\n      bio: \"\",\r\n      company: \"\",\r\n      location: \"\",\r\n      email: \"vilaj46@gmail.com\",\r\n      visibleEmail: \"\",\r\n      visibleEmails: [\"vilaj46@gmail.com\"],\r\n      website: \"\",\r\n      twitter: \"\",\r\n    },\r\n  ],\r\n  login: (username, password) => {\r\n    for (let i = 0; i < api.users.length; i++) {\r\n      const potentialUser = api.users[i];\r\n      if (username === potentialUser.username) {\r\n        const isValidPW = api.checkPW(password, potentialUser.password);\r\n        if (isValidPW) {\r\n          return {\r\n            ...potentialUser,\r\n            jwt: api.jwt,\r\n          };\r\n        } else {\r\n          return 406;\r\n        }\r\n      }\r\n    }\r\n\r\n    return 404;\r\n  },\r\n  checkPW: (currentPW, actualPW) => {\r\n    if (currentPW === actualPW) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  signup: (username, email, password) => {\r\n    for (let i = 0; i < api.users.length; i++) {\r\n      const potentialUser = api.users[i];\r\n      if (username === potentialUser.username) {\r\n        return [406, \"username\"];\r\n      } else if (email === potentialUser.email) {\r\n        return [406, \"email\"];\r\n      }\r\n    }\r\n    const newUser = User(username, password);\r\n    const newUserToJson = { jwt: \"12345\" };\r\n    Object.keys(newUser).forEach((k) => {\r\n      if (k !== \"password\") {\r\n        newUserToJson[k] = newUser[k];\r\n      }\r\n    });\r\n    api.users.push(newUser);\r\n    return [newUserToJson];\r\n  },\r\n  updateProfile: (username, values) => {\r\n    for (let i = 0; i < api.users.length; i++) {\r\n      const potentialUser = api.users[i];\r\n      if (username === potentialUser.username) {\r\n        api.users[i] = { ...potentialUser, ...values };\r\n        return 200;\r\n      }\r\n    }\r\n    return 404;\r\n  },\r\n};\r\n\r\nexport default api;\r\n","import api from \"../../../../api.js\";\r\n\r\n/**\r\n * save\r\n *\r\n * @param {String} username - The username we are logged into.\r\n * @param {Object} data - The current state of our profile inputs.\r\n * @param {Function} setProfileKey - Our main profile hook to apply changes.\r\n * @param {Function} setDisplayBioInputs - Open / Closes the Profile inputs.\r\n *\r\n * Updates our profile in the backend.\r\n * Updates our current state on the frontend.\r\n * Close the inputs.\r\n */\r\nconst save = (username, data, setProfileKey, setDisplayBioInputs) => {\r\n  api.updateProfile(username, data);\r\n  setProfileKey(data);\r\n  setDisplayBioInputs(false);\r\n};\r\n\r\nexport default save;\r\n","/**\r\n * cancel\r\n *\r\n * @param {Hook} setDisplayBioInputs - Opens and closes our Biography inputs.\r\n * @param {Array} hooks - Array of hooks for the inputs.\r\n *\r\n * Iterate over our array and set the values to our currently saved data.\r\n *\r\n * Close the profile afterwards.\r\n */\r\nconst cancel = (setDisplayBioInputs, hooks) => {\r\n  hooks.forEach((hook) => {\r\n    hook.action(hook.value);\r\n  });\r\n\r\n  setDisplayBioInputs(false);\r\n};\r\n\r\nexport default cancel;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport styles from \"./Biography.module.css\";\r\n\r\n// Helper Components\r\nimport EmailInput from \"./helpers/EmailInput\";\r\nimport BioTextArea from \"./helpers/BioTextArea\";\r\nimport BioStringInput from \"./helpers/BioStringInput\";\r\nimport EditProfileButton from \"./helpers/EditProfileButton\";\r\n\r\n// Helper Functions\r\nimport save from \"./funcs/save\";\r\nimport cancel from \"./funcs/cancel\";\r\n\r\nconst Biography = ({\r\n  authentication,\r\n  setProfileKey,\r\n  displayBioInputs,\r\n  setDisplayBioInputs,\r\n}) => {\r\n  // Current state of our profile from the backend.\r\n  const [bioText, setBioText] = useState(authentication.bio);\r\n  const [companyText, setCompanyText] = useState(authentication.company);\r\n  const [locationText, setLocationText] = useState(authentication.location);\r\n  const [emailText, setEmailText] = useState(authentication.visibleEmail);\r\n  const [websiteText, setWebsiteText] = useState(authentication.website);\r\n  const [twitterText, setTwitterText] = useState(authentication.twitter);\r\n\r\n  // Data we have to send if we click save.\r\n  const data = {\r\n    bio: bioText,\r\n    visibleEmail: emailText,\r\n    company: companyText,\r\n    location: locationText,\r\n    website: websiteText,\r\n    twitter: twitterText,\r\n  };\r\n\r\n  // The current state of our hook and the respected setter.\r\n  // If we click cancel we won't change a thing.\r\n  const hooks = [\r\n    { value: authentication.bio, action: setBioText },\r\n    { value: authentication.company, action: setCompanyText },\r\n    { value: authentication.location, action: setLocationText },\r\n    { value: authentication.website, action: setWebsiteText },\r\n    { value: authentication.twitter, action: setTwitterText },\r\n  ];\r\n\r\n  return (\r\n    <Form style={{ minWidth: \"229px\", maxWidth: \"229px\" }}>\r\n      <img\r\n        className={styles.profilePic}\r\n        src={authentication.profilePic}\r\n        alt=\"Avatar\"\r\n      />\r\n      <p className={styles.username}>{authentication.username}</p>\r\n      {!displayBioInputs && (\r\n        <EditProfileButton setDisplayBioInputs={setDisplayBioInputs} />\r\n      )}\r\n      {displayBioInputs && (\r\n        <div>\r\n          <BioTextArea bio={bioText} setBioText={setBioText} />\r\n          <BioStringInput\r\n            localKey=\"Company\"\r\n            keyValue={companyText}\r\n            setProfileKey={setCompanyText}\r\n          />\r\n          <BioStringInput\r\n            localKey=\"Location\"\r\n            keyValue={locationText}\r\n            setProfileKey={setLocationText}\r\n          />\r\n          <EmailInput\r\n            email={emailText}\r\n            visibleEmails={authentication.visibleEmails}\r\n            setEmailText={setEmailText}\r\n          />\r\n          <BioStringInput\r\n            localKey=\"Website\"\r\n            keyValue={websiteText}\r\n            setProfileKey={setWebsiteText}\r\n          />\r\n          <BioStringInput\r\n            localKey=\"Twitter\"\r\n            keyValue={twitterText}\r\n            setProfileKey={setTwitterText}\r\n          />\r\n          <Button\r\n            type=\"button\"\r\n            className={styles.save}\r\n            onClick={() =>\r\n              save(\r\n                authentication.username,\r\n                data,\r\n                setProfileKey,\r\n                setDisplayBioInputs\r\n              )\r\n            }\r\n          >\r\n            Save\r\n          </Button>\r\n          <Button\r\n            type=\"button\"\r\n            className={styles.cancel}\r\n            onClick={() => cancel(setDisplayBioInputs, hooks)}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n\r\nBiography.propTypes = {\r\n  authentication: PropTypes.shape({\r\n    profilePic: PropTypes.string.isRequired,\r\n    token: PropTypes.string.isRequired,\r\n    username: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  setProfileKey: PropTypes.func.isRequired,\r\n  displayBioInputs: PropTypes.bool.isRequired,\r\n  setDisplayBioInputs: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Biography;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport styles from \"./ProfilePage.module.css\";\r\n\r\nimport Biography from \"./Biography/Biography\";\r\n\r\nconst ProfilePage = ({ authentication, setProfileKey }) => {\r\n  const [displayBioInputs, setDisplayBioInputs] = useState(false);\r\n  return (\r\n    <div className={styles.profilePage}>\r\n      <Biography\r\n        authentication={authentication}\r\n        setProfileKey={setProfileKey}\r\n        displayBioInputs={displayBioInputs}\r\n        setDisplayBioInputs={setDisplayBioInputs}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nProfilePage.propTypes = {\r\n  authentication: PropTypes.shape({\r\n    profilePic: PropTypes.string.isRequired,\r\n    token: PropTypes.string.isRequired,\r\n    username: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  setProfileKey: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ProfilePage;\r\n","import styles from \"../AuthenticationPage.module.css\";\r\n\r\n/**\r\n * emphasizeUserErrorMessage\r\n *\r\n * @param {Number} time - The amount of time allowed between clicks.\r\n * @param {Hook} setLastClicked - The time we last click the login button.\r\n * @param {Number} usernameMessage - Index of the message we want to display.\r\n * @param {Date} lastClicked - Time of our last click.\r\n *\r\n * Will only do the animation if we are not spamming the login button.\r\n * Checks the difference in time, if it is too soon we don't emphasize.\r\n *\r\n * We are also removing the password bolding and email bolding because it was bugged\r\n * and bolding even if it was not an error.\r\n */\r\nconst emphasizeUserErrorMessage = (\r\n  time,\r\n  setLastClicked,\r\n  usernameMessage,\r\n  lastClicked\r\n) => {\r\n  if (Date.now() - time < lastClicked) return;\r\n  setLastClicked(Date.now());\r\n  const prevMessage = usernameMessage;\r\n  if (usernameMessage > 0 && prevMessage === usernameMessage) {\r\n    const element = document.getElementById(\"usernameId\");\r\n    const emailId = document.getElementById(\"emailId\");\r\n    const passwordId = document.getElementById(\"passwordId\");\r\n    passwordId.classList.remove(\"bold\");\r\n    emailId.classList.remove(\"bold\");\r\n    element.classList.add(styles.bold);\r\n    setTimeout(() => {\r\n      element.classList.remove(styles.bold);\r\n    }, time);\r\n  }\r\n};\r\n\r\n/**\r\n * emphasizePassErrorMessage\r\n *\r\n * @param {Number} time - The amount of time allowed between clicks.\r\n * @param {Hook} setLastClicked - The time we last click the login button.\r\n * @param {Number} passwordMessage - Index of the message we want to display.\r\n * @param {Date} lastClicked - Time of our last click.\r\n *\r\n * Will only do the animation if we are not spamming the login button.\r\n * Checks the difference in time, if it is too soon we don't emphasize.\r\n *\r\n * We are also removing the username bolding and email bolding because it was bugged\r\n * and bolding even if it was not an error.\r\n */\r\nconst emphasizePassErrorMessage = (\r\n  time,\r\n  setLastClicked,\r\n  passwordMessage,\r\n  lastClicked\r\n) => {\r\n  if (Date.now() - time < lastClicked) return;\r\n  setLastClicked(Date.now());\r\n  const prevMessage = passwordMessage;\r\n  const usernameId = document.getElementById(\"usernameId\");\r\n  const emailId = document.getElementById(\"emailId\");\r\n  if (passwordMessage > 0 && prevMessage === passwordMessage) {\r\n    const element = document.getElementById(\"passwordId\");\r\n    usernameId.classList.remove(\"bold\");\r\n    emailId.classList.remove(\"bold\");\r\n    element.classList.add(styles.bold);\r\n    setTimeout(() => {\r\n      element.classList.remove(styles.bold);\r\n    }, time);\r\n  }\r\n};\r\n\r\n/**\r\n * emphasizeEmailErrorMessage\r\n *\r\n * @param {Number} time - The amount of time allowed between clicks.\r\n * @param {Hook} setLastClicked - The time we last click the login button.\r\n * @param {Number} passwordMessage - Index of the message we want to display.\r\n * @param {Date} lastClicked - Time of our last click.\r\n *\r\n * Will only do the animation if we are not spamming the login button.\r\n * Checks the difference in time, if it is too soon we don't emphasize.\r\n *\r\n * We are also removing the username bolding and password bolding because it was bugged\r\n * and bolding even if it was not an error.\r\n */\r\nconst emphasizeEmailErrorMessage = (\r\n  time,\r\n  setLastClicked,\r\n  emailMessage,\r\n  lastClicked\r\n) => {\r\n  if (Date.now() - time < lastClicked) return;\r\n  setLastClicked(Date.now());\r\n  const prevMessage = emailMessage;\r\n  const usernameId = document.getElementById(\"usernameId\");\r\n  const passwordId = document.getElementById(\"passwordId\");\r\n  if (emailMessage > 0 && prevMessage === emailMessage) {\r\n    const element = document.getElementById(\"emailId\");\r\n    usernameId.classList.remove(\"bold\");\r\n    passwordId.classList.remove(\"bold\");\r\n    element.classList.add(styles.bold);\r\n    setTimeout(() => {\r\n      element.classList.remove(styles.bold);\r\n    }, time);\r\n  }\r\n};\r\n\r\nexport default {\r\n  userErrorMessage: emphasizeUserErrorMessage,\r\n  passErrorMessage: emphasizePassErrorMessage,\r\n  emailErrorMessage: emphasizeEmailErrorMessage,\r\n};\r\n","import api from \"../../../api.js\";\r\nimport emphasize from \"./emphasize.js\";\r\n\r\n/**\r\n * login\r\n *\r\n * @param {Object} credentials - username, email, password\r\n * @param {Object} actions - setUsernameError, setEmailError, setPasswordError, setUsernameMessage, setEmailMessage, setPasswordMessage, lastClicked, setLastClicked, setToken\r\n * @param {Object} state - usernameMessage, passwordMessage, lastClicked, history\r\n *\r\n * Checks if the username or password are blank. If they are display the message.\r\n * If we try logging in with a message already display, emphasize the message.\r\n * Cut short if either are blank.\r\n *\r\n * If there is a username and password, make the api call.\r\n * Set the appropriate messages and emphasizes based off our response.\r\n *\r\n */\r\nconst login = (credentials, actions, state) => {\r\n  if (credentials.username.trim().length === 0) {\r\n    // Username value is empty.\r\n    actions.setUsernameError(true);\r\n    actions.setPasswordError(false);\r\n    actions.setUsernameMessage(1);\r\n    emphasize.userErrorMessage(\r\n      500,\r\n      actions.setLastClicked,\r\n      state.usernameMessage,\r\n      state.lastClicked\r\n    );\r\n    return;\r\n  } else if (credentials.password.trim().length === 0) {\r\n    // Password value is empty.\r\n    actions.setPasswordError(true);\r\n    actions.setUsernameError(false);\r\n    actions.setPasswordMessage(1);\r\n    emphasize.passErrorMessage(\r\n      500,\r\n      actions.setLastClicked,\r\n      state.passwordMessage,\r\n      state.lastClicked\r\n    );\r\n    return;\r\n  }\r\n\r\n  const response = api.login(credentials.username, credentials.password);\r\n\r\n  if (response === 404) {\r\n    // Username not found.\r\n    actions.setUsernameError(true);\r\n    actions.setPasswordError(false);\r\n    actions.setUsernameMessage(2);\r\n    emphasize.userErrorMessage(\r\n      500,\r\n      actions.setLastClicked,\r\n      state.usernameMessage,\r\n      state.lastClicked\r\n    );\r\n  } else if (response === 406) {\r\n    // Incorrect credentials.password.\r\n    actions.setPasswordError(true);\r\n    actions.setUsernameError(false);\r\n    actions.setPasswordMessage(2);\r\n    emphasize.passErrorMessage(\r\n      500,\r\n      actions.setLastClicked,\r\n      state.passwordMessage,\r\n      state.lastClicked\r\n    );\r\n  } else {\r\n    // Successful login.\r\n    actions.setToken(response);\r\n    actions.setUsernameError(false);\r\n    actions.setPasswordError(false);\r\n    state.history.push(\"/profile\");\r\n  }\r\n};\r\n\r\nexport default login;\r\n","import emphasize from \"./emphasize\";\r\nimport api from \"../../../api.js\";\r\n\r\n/**\r\n * signup\r\n *\r\n * @param {Object} credentials - username, password\r\n * @param {Object} actions - setUsernameError, setPasswordError, setUsernameMessage, setPasswordMessage, lastClicked, setLastClicked, setToken\r\n * @param {Object} state - usernameMessage, passwordMessage, lastClicked, history\r\n *\r\n * Checks if the username or password are blank. If they are display the message.\r\n * If we try logging in with a message already display, emphasize the message.\r\n * Cut short if either are blank.\r\n *\r\n * If there is a username and password, make the api call.\r\n * Set the appropriate messages and emphasizes based off our response.\r\n *\r\n */\r\nconst signup = (credentials, actions, state) => {\r\n  if (credentials.username.trim().length === 0) {\r\n    // Username value is empty.\r\n    actions.setUsernameError(true);\r\n    actions.setEmailError(false);\r\n    actions.setPasswordError(false);\r\n    actions.setUsernameMessage(1);\r\n    emphasize.userErrorMessage(\r\n      500,\r\n      actions.setLastClicked,\r\n      state.usernameMessage,\r\n      state.lastClicked\r\n    );\r\n    return;\r\n  } else if (credentials.email.trim().length === 0) {\r\n    // Email is empty.\r\n    actions.setEmailError(true);\r\n    actions.setUsernameError(false);\r\n    actions.setPasswordError(false);\r\n    actions.setEmailMessage(1);\r\n    emphasize.emailErrorMessage(\r\n      500,\r\n      actions.setLastClicked,\r\n      state.emailMessage,\r\n      state.lastClicked\r\n    );\r\n    return;\r\n  } else if (credentials.password.trim().length === 0) {\r\n    // Password value is empty.\r\n    actions.setPasswordError(true);\r\n    actions.setUsernameError(false);\r\n    actions.setEmailError(false);\r\n    actions.setPasswordMessage(1);\r\n    emphasize.passErrorMessage(\r\n      500,\r\n      actions.setLastClicked,\r\n      state.passwordMessage,\r\n      state.lastClicked\r\n    );\r\n    return;\r\n  }\r\n\r\n  const response = api.signup(\r\n    credentials.username,\r\n    credentials.email,\r\n    credentials.password\r\n  );\r\n  if (response.includes(406) && response.includes(\"username\")) {\r\n    // Username in use.\r\n    actions.setUsernameError(true);\r\n    actions.setPasswordError(false);\r\n    actions.setUsernameMessage(3);\r\n    emphasize.userErrorMessage(\r\n      500,\r\n      actions.setLastClicked,\r\n      state.usernameMessage,\r\n      state.lastClicked\r\n    );\r\n  } else if (response.includes(406) && response.includes(\"email\")) {\r\n    // Email in use.\r\n    actions.setEmailError(true);\r\n    actions.setUsernameError(false);\r\n    actions.setPasswordError(false);\r\n    actions.setEmailMessage(3);\r\n    emphasize.emailErrorMessage(\r\n      500,\r\n      actions.setLastClicked,\r\n      state.emailMessage,\r\n      state.lastClicked\r\n    );\r\n  } else {\r\n    // Successful login.\r\n    actions.setToken(response[0]);\r\n    actions.setUsernameError(false);\r\n    actions.setPasswordError(false);\r\n    state.history.push(\"/profile\");\r\n  }\r\n};\r\n\r\nexport default signup;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport styles from \"../AuthenticationPage.module.css\";\r\n\r\nconst LoginButton = ({ page }) => {\r\n  const buttonStyle =\r\n    page === \"login\" ? styles.loginButton : styles.signupButton;\r\n  const buttonText = page === \"login\" ? \"Log In\" : \"Create New Account\";\r\n\r\n  return (\r\n    <Button variant=\"primary\" type=\"submit\" className={buttonStyle}>\r\n      {buttonText}\r\n    </Button>\r\n  );\r\n};\r\n\r\nLoginButton.propTypes = {\r\n  page: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default LoginButton;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nimport styles from \"../AuthenticationPage.module.css\";\r\n\r\nconst UsernameText = ({ usernameError, usernameMessage }) => {\r\n  const messages = [\r\n    <p id=\"usernameId\" className={styles.blankUsernameMessage}>\r\n      We'll never share your email with anyone else.\r\n    </p>,\r\n    <p className={styles.textError} id=\"usernameId\">\r\n      Username cannot be blank.\r\n    </p>,\r\n    <p className={styles.textError} id=\"usernameId\">\r\n      The email you've entered doesn't match any account.&nbsp;\r\n      <Link to=\"signup\" className={styles.boldError}>\r\n        <span>Sign up for an account.</span>\r\n      </Link>\r\n    </p>,\r\n    <p className={styles.textError} id=\"usernameId\">\r\n      That username is already taken.\r\n    </p>,\r\n  ];\r\n\r\n  return (\r\n    <Form.Text className=\"text-muted\">\r\n      {usernameError ? messages[usernameMessage] : messages[0]}\r\n    </Form.Text>\r\n  );\r\n};\r\n\r\nUsernameText.propTypes = {\r\n  usernameError: PropTypes.bool.isRequired,\r\n  usernameMessage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default UsernameText;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nimport styles from \"../AuthenticationPage.module.css\";\r\n\r\nconst EmailText = ({ emailError, emailMessage }) => {\r\n  const messages = [\r\n    <p id=\"emailId\">We'll never share your email with anyone else.</p>,\r\n    <p className={styles.textError} id=\"emailId\">\r\n      Email cannot be blank.\r\n    </p>,\r\n    <p className={styles.textError} id=\"emailId\">\r\n      The email you've entered doesn't match any account.&nbsp;\r\n      <Link to=\"signup\" className={styles.boldError}>\r\n        <span>Sign up for an account.</span>\r\n      </Link>\r\n    </p>,\r\n    <p className={styles.textError} id=\"emailId\">\r\n      That email is already taken.\r\n    </p>,\r\n  ];\r\n\r\n  return (\r\n    <Form.Text className=\"text-muted\">\r\n      {emailError ? messages[emailMessage] : messages[0]}\r\n    </Form.Text>\r\n  );\r\n};\r\n\r\nEmailText.propTypes = {\r\n  emailError: PropTypes.bool.isRequired,\r\n  emailMessage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default EmailText;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nimport styles from \"../AuthenticationPage.module.css\";\r\n\r\nconst PasswordText = ({ passwordError, passwordMessage }) => {\r\n  const messages = [\r\n    <p id=\"passwordId\">Never share your password with anyone else.</p>,\r\n    <p className={styles.textError} id=\"passwordId\">\r\n      Password cannot be blank.\r\n    </p>,\r\n    <p className={styles.textError} id=\"passwordId\">\r\n      The password you've entered is incorrect.{\" \"}\r\n      <span className={styles.boldError}>Forgot Password?</span>\r\n    </p>,\r\n  ];\r\n\r\n  return (\r\n    <Form.Text className=\"text-muted\">\r\n      {passwordError ? messages[passwordMessage] : messages[0]}\r\n    </Form.Text>\r\n  );\r\n};\r\n\r\nPasswordText.propTypes = {\r\n  passwordError: PropTypes.bool.isRequired,\r\n  passwordMessage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default PasswordText;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport styles from \"../AuthenticationPage.module.css\";\r\n\r\nimport authProblem from \"../../../svgs/auth_problem.svg\";\r\n\r\nconst ErrorSVG = ({ error }) => {\r\n  return (\r\n    error && (\r\n      <img\r\n        src={authProblem}\r\n        alt=\"Authentication Problem\"\r\n        className={styles.authProblem}\r\n      />\r\n    )\r\n  );\r\n};\r\n\r\nErrorSVG.propTypes = {\r\n  error: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default ErrorSVG;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport showPassword from \"../../../svgs/show_password.svg\";\r\nimport hidePassword from \"../../../svgs/hide_password.svg\";\r\n\r\nimport styles from \"../AuthenticationPage.module.css\";\r\n\r\nconst PasswordVisibilityButton = ({\r\n  displayPassword,\r\n  passwordError,\r\n  setDisplayPassword,\r\n}) => {\r\n  return displayPassword ? (\r\n    <button\r\n      type=\"button\"\r\n      className={passwordError ? styles.showPW1 : styles.showPW2}\r\n      onClick={() => setDisplayPassword(false)}\r\n    >\r\n      <img src={hidePassword} alt=\"Password Vision\" />\r\n    </button>\r\n  ) : (\r\n    <button\r\n      type=\"button\"\r\n      className={passwordError ? styles.showPW1 : styles.showPW2}\r\n      onClick={() => setDisplayPassword(true)}\r\n    >\r\n      <img src={showPassword} alt=\"Password Vision\" />\r\n    </button>\r\n  );\r\n};\r\n\r\nPasswordVisibilityButton.propTypes = {\r\n  displayPassword: PropTypes.bool.isRequired,\r\n  passwordError: PropTypes.bool.isRequired,\r\n  setDisplayPassword: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PasswordVisibilityButton;\r\n","import React, { useState } from \"react\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport styles from \"./AuthenticationPage.module.css\";\r\n\r\n// Helper Functions\r\nimport login from \"./funcs/login.js\";\r\nimport signup from \"./funcs/signup.js\";\r\n\r\n// Helper Components\r\nimport LoginButton from \"./helpers/LoginButton\";\r\nimport UsernameText from \"./helpers/UsernameText\";\r\nimport EmailText from \"./helpers/EmailText\";\r\nimport PasswordText from \"./helpers/PasswordText\";\r\nimport ErrorSVG from \"./helpers/ErrorSVG\";\r\nimport PasswordVisibilityButton from \"./helpers/PasswordVisibilityButton\";\r\n\r\nconst AuthenticationPage = ({ setToken, page }) => {\r\n  // Current state of the inputs.\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  // Whether or not we have an error. Does not specify the error.\r\n  // Also determines the border / color of the input.\r\n  const [usernameError, setUsernameError] = useState(false);\r\n  const [emailError, setEmailError] = useState(false);\r\n  const [passwordError, setPasswordError] = useState(false);\r\n\r\n  // Whether or not we will be displaying the password in text.\r\n  // Also determines the password visiblity icon.\r\n  const [displayPassword, setDisplayPassword] = useState(false);\r\n\r\n  // Current state of the error message.\r\n  // We keep an array of messages in another component.\r\n  const [usernameMessage, setUsernameMessage] = useState(0);\r\n  const [emailMessage, setEmailMessage] = useState(0);\r\n  const [passwordMessage, setPasswordMessage] = useState(0);\r\n\r\n  // The last time we have clicked the login / signup button.\r\n  const [lastClicked, setLastClicked] = useState(undefined);\r\n\r\n  // Either login or signup. Determines the action we take.\r\n  const [prevPage, setPrevPage] = useState(page);\r\n\r\n  // React-router-dom hook. Use the location to determine\r\n  // aesthetics and we use the push function if we are successful.\r\n  const history = useHistory();\r\n\r\n  // Resets Form if we switch between the login / signup page.\r\n  if (prevPage !== page) {\r\n    setPrevPage(page);\r\n    setUsername(\"\");\r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n    setUsernameError(false);\r\n    setEmailError(false);\r\n    setPasswordError(false);\r\n    setDisplayPassword(false);\r\n    setUsernameMessage(0);\r\n    setEmailMessage(0);\r\n    setPasswordMessage(0);\r\n  }\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Our current input states.\r\n    const credentials = { username, email, password };\r\n\r\n    // Also our current state not related to credentials.\r\n    const state = {\r\n      usernameMessage,\r\n      passwordMessage,\r\n      emailMessage,\r\n      lastClicked,\r\n      history,\r\n    };\r\n\r\n    // Our hook setters.\r\n    const actions = {\r\n      setUsernameError,\r\n      setEmailError,\r\n      setPasswordError,\r\n      setUsernameMessage,\r\n      setEmailMessage,\r\n      setPasswordMessage,\r\n      setLastClicked,\r\n      setToken,\r\n    };\r\n\r\n    if (page === \"login\") {\r\n      login(credentials, actions, state);\r\n    } else {\r\n      signup(credentials, actions, state);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Jumbotron>\r\n      <Form className={styles.form} onSubmit={(e) => onSubmit(e)}>\r\n        <Form.Group controlId=\"formBasic\" className={styles.relative}>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter username\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n            className={usernameError ? styles.error : \"\"}\r\n          />\r\n          <ErrorSVG error={usernameError} />\r\n          <UsernameText\r\n            usernameError={usernameError}\r\n            usernameMessage={usernameMessage}\r\n          />\r\n        </Form.Group>\r\n        {history.location.pathname === \"/signup\" && (\r\n          <Form.Group controlId=\"formBasicEmail\" className={styles.relative}>\r\n            <Form.Control\r\n              type=\"email\"\r\n              placeholder=\"Enter email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              className={emailError ? styles.error : \"\"}\r\n            />\r\n            <ErrorSVG error={emailError} />\r\n            <EmailText emailError={emailError} emailMessage={emailMessage} />\r\n          </Form.Group>\r\n        )}\r\n        <Form.Group controlId=\"formBasicPassword\" className={styles.relative}>\r\n          <Form.Control\r\n            type={displayPassword ? \"text\" : \"password\"}\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            className={passwordError ? styles.error : \"\"}\r\n            autoComplete=\"on\"\r\n          />\r\n          <PasswordVisibilityButton\r\n            displayPassword={displayPassword}\r\n            passwordError={passwordError}\r\n            setDisplayPassword={setDisplayPassword}\r\n          />\r\n          <ErrorSVG error={passwordError} />\r\n          <PasswordText\r\n            passwordError={passwordError}\r\n            passwordMessage={passwordMessage}\r\n          />\r\n        </Form.Group>\r\n        <LoginButton page={page} />\r\n      </Form>\r\n    </Jumbotron>\r\n  );\r\n};\r\n\r\nAuthenticationPage.propTypes = {\r\n  setToken: PropTypes.func.isRequired,\r\n  page: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default AuthenticationPage;\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport styles from \"../../App/App.module.css\";\r\n\r\nconst SignupButton = () => {\r\n  return (\r\n    <Link to=\"/signup\">\r\n      <Button className={styles.button}>Signup</Button>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default SignupButton;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport styles from \"../../App/App.module.css\";\r\n\r\nconst LogButton = ({ isAuthenticated, setToken }) => {\r\n  if (isAuthenticated) {\r\n    return (\r\n      <Button\r\n        className={`${styles.button} ${styles.link}`}\r\n        onClick={() => setToken({ username: \"\", response: \"\" })}\r\n      >\r\n        Log Out\r\n      </Button>\r\n    );\r\n  } else {\r\n    return (\r\n      <Link className={styles.link} to=\"/login\">\r\n        <Button className={styles.button}>Log In</Button>\r\n      </Link>\r\n    );\r\n  }\r\n};\r\n\r\nLogButton.propTypes = {\r\n  isAuthenticated: PropTypes.bool.isRequired,\r\n  setToken: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default LogButton;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport styles from \"../..//App/App.module.css\";\r\n\r\nconst ProfileButton = ({ authentication }) => {\r\n  return (\r\n    <Link className={styles.profile} to=\"/signup\">\r\n      <Button className={styles.button}>\r\n        <img\r\n          src={authentication.profilePic}\r\n          alt=\"Profile\"\r\n          className={styles.profilePic}\r\n          width=\"32\"\r\n          height=\"32\"\r\n        />\r\n        <span className={styles.profileText}>Profile</span>\r\n      </Button>\r\n    </Link>\r\n  );\r\n};\r\n\r\nProfileButton.propTypes = {\r\n  authentication: PropTypes.shape({\r\n    profilePic: PropTypes.string.isRequired,\r\n    token: PropTypes.string.isRequired,\r\n    username: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default ProfileButton;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport styles from \"../App/App.module.css\";\r\n\r\n// Helper Components\r\nimport SignupButton from \"./helpers/SignupButton\";\r\nimport LogButton from \"./helpers/LogButton\";\r\nimport ProfileButton from \"./helpers/ProfileButton\";\r\n\r\nconst Header = ({ setToken, isAuthenticated, authentication }) => {\r\n  return (\r\n    <header className={styles.header}>\r\n      <nav className={styles.nav}>\r\n        <div className={styles.linksContainer}>\r\n          <Link to=\"/\" className={styles.items}>\r\n            <Button className={styles.button}>Items</Button>\r\n          </Link>\r\n          <LogButton isAuthenticated={isAuthenticated} setToken={setToken} />\r\n          {!isAuthenticated && (\r\n            <SignupButton\r\n              isAuthenticated={isAuthenticated}\r\n              authentication={authentication}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className={styles.profileContainer}>\r\n          {isAuthenticated && <ProfileButton authentication={authentication} />}\r\n        </div>\r\n      </nav>\r\n      <h1>My Glorified To Do List</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  isAuthenticated: PropTypes.bool.isRequired,\r\n  authentication: PropTypes.shape({\r\n    profilePic: PropTypes.string.isRequired,\r\n    token: PropTypes.string.isRequired,\r\n    username: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport styles from \"./AddTodoForm.module.css\";\r\n\r\nconst AddTodoForm = ({ addTodo }) => {\r\n  const [value, setValue] = useState(\"\");\r\n  const [showWarning, setShowWarning] = useState(false);\r\n\r\n  /**\r\n   * onSubmit\r\n   *\r\n   * @param {Object} e - Event object.\r\n   *\r\n   * If we submit the form or click the 'Add' button.\r\n   * Triggers the addTodo function from our custom hook.\r\n   * If didAdd is returned true it was a success and we can set our\r\n   * form text to '' and remove the warning if it was there.\r\n   *\r\n   * If we fail to add the new todo we just show the warning and keep the text.\r\n   * The only way to fail will be from a blank form.\r\n   */\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const didAdd = addTodo({\r\n      todo: value,\r\n      IDNumber: value + Math.random(10000),\r\n      completed: false,\r\n    });\r\n    if (didAdd) {\r\n      setValue(\"\");\r\n      setShowWarning(false);\r\n    } else {\r\n      setShowWarning(true);\r\n    }\r\n  };\r\n\r\n  const warningDisplay = showWarning ? styles.display : styles.hide;\r\n\r\n  return (\r\n    <Form className={styles.form} onSubmit={(e) => onSubmit(e)}>\r\n      <Form.Control\r\n        size=\"lg\"\r\n        type=\"text\"\r\n        placeholder=\"Todo...\"\r\n        value={value}\r\n        onChange={(e) => setValue(e.target.value)}\r\n        className={styles.input}\r\n        onSubmit={(e) => onSubmit(e)}\r\n      />\r\n      <div className={styles.buttonContainer}>\r\n        <span className={`${styles.warning} ${warningDisplay}`}>\r\n          You must write something!\r\n        </span>\r\n        <Button\r\n          onClick={(e) => onSubmit(e)}\r\n          data-testid=\"add-todo\"\r\n          className={styles.button}\r\n        >\r\n          Add\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nAddTodoForm.propTypes = {\r\n  addTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddTodoForm;\r\n","import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\n\nimport styles from \"./App.module.css\";\n\n// Pages\nimport TodoItems from \"../TodoItems/TodoItems\";\nimport ProfilePage from \"../ProfilePage/ProfilePage\";\nimport AuthenticationPage from \"../AuthenticationPage/AuthenticationPage\";\n\nimport Header from \"../Header/Header\";\nimport AddTodoForm from \"../AddTodoForm/AddTodoForm\";\n\n// Hooks\nimport useTodos from \"../hooks/useTodos\";\nimport useAuthentication from \"../hooks/useAuthentication\";\n\nconst App = () => {\n  const [todos, addTodo, completeTodo, removeTodo, swapTodoItems] = useTodos();\n  const [authentication, setToken, setProfileKey] = useAuthentication();\n\n  const isAuthenticated =\n    authentication.username.length > 0 && authentication.token.length > 0;\n\n  return (\n    <Jumbotron className={styles.fixedPadding}>\n      <div className={styles.width}>\n        <div className={styles.top}>\n          <Header\n            authentication={authentication}\n            setToken={setToken}\n            isAuthenticated={isAuthenticated}\n          />\n          <Route\n            path=\"/\"\n            exact\n            render={() => <AddTodoForm addTodo={addTodo} />}\n          />\n        </div>\n        <Switch>\n          <Route path=\"/\" exact>\n            <TodoItems\n              todos={todos}\n              completeTodo={completeTodo}\n              removeTodo={removeTodo}\n              swapTodoItems={swapTodoItems}\n            />\n          </Route>\n          <Route path=\"/login\" exact>\n            {isAuthenticated ? (\n              <Redirect to=\"/profile\" />\n            ) : (\n              <AuthenticationPage setToken={setToken} page=\"login\" />\n            )}\n          </Route>\n          <Route path=\"/signup\" exact>\n            {isAuthenticated ? (\n              <Redirect to=\"/profile\" />\n            ) : (\n              <AuthenticationPage setToken={setToken} page=\"signup\" />\n            )}\n          </Route>\n          <Route path=\"/profile\" exact>\n            {isAuthenticated ? (\n              <ProfilePage\n                authentication={authentication}\n                setProfileKey={setProfileKey}\n              />\n            ) : (\n              <Redirect to=\"/login\" />\n            )}\n          </Route>\n        </Switch>\n      </div>\n    </Jumbotron>\n  );\n};\n\nexport default App;\n","import { useState } from \"react\";\r\n\r\nexport default () => {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  /**\r\n   * addTodo\r\n   *\r\n   * @param {Object} item - A potentially new todo item.\r\n   * @return {Boolean} Whether we added the TodoItem.\r\n   *\r\n   * Checks if our new todo isnt just a blank space.\r\n   * If its not add it to the list.\r\n   */\r\n  const addTodo = (item) => {\r\n    const text = item.todo.trim();\r\n    if (text.length > 0) {\r\n      item.todo = text;\r\n      todos.push(item);\r\n      setTodos([...todos]);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * completedTodo\r\n   *\r\n   * @param {Object} item - The todo item we will be completing or uncompleting.\r\n   *\r\n   * Given the item and the current index of the item.\r\n   * First we check if the given index is the one we are completing.\r\n   *\r\n   * If it isn't ( basically if we add drag and drop or item movement),\r\n   * then we will traverse the array checking.\r\n   *\r\n   * Toggle completed on the found item.\r\n   */\r\n  const completeTodo = (item) => {\r\n    const { index, IDNumber } = item;\r\n    if (todos[index].IDNumber === IDNumber) {\r\n      todos[index].completed = !todos[index].completed;\r\n    } else {\r\n      let searchedIndex;\r\n      for (let i = 0; i < todos.length; i++) {\r\n        const todo = todos[i];\r\n        if (todo.IDNumber === IDNumber) {\r\n          searchedIndex = i;\r\n          break;\r\n        }\r\n      }\r\n      todos[searchedIndex].completed = !todos[searchedIndex].completed;\r\n    }\r\n\r\n    setTodos([...todos]);\r\n  };\r\n\r\n  /**\r\n   * removeTodo\r\n   *\r\n   * @param {Object} item - The todo item we will be removing.\r\n   *\r\n   * Given the item and the current index of the item.\r\n   * First we check if the given index is the one we are removing.\r\n   *\r\n   * If it isn't ( basically if we add drag and drop or item movement),\r\n   * then we will traverse the array checking.\r\n   *\r\n   * Remove the found item.\r\n   */\r\n  const removeTodo = (item) => {\r\n    const { index, IDNumber } = item;\r\n\r\n    if (todos[index].IDNumber === IDNumber) {\r\n      todos.splice(index, 1);\r\n    } else {\r\n      let searchedIndex;\r\n      for (let i = 0; i < todos.length; i++) {\r\n        const todo = todos[i];\r\n        if (todo.IDNumber === IDNumber) {\r\n          searchedIndex = i;\r\n          break;\r\n        }\r\n      }\r\n      todos.splice(searchedIndex, 1);\r\n    }\r\n\r\n    setTodos([...todos]);\r\n  };\r\n\r\n  /**\r\n   * swapTodoItems\r\n   *\r\n   * @param {Object} item1 - Item being dragged / dropped.\r\n   * @param {*} item2 - Item being dropped on.\r\n   *\r\n   * Swap the items in the array.\r\n   */\r\n  const swapTodoItems = (item1, item2) => {\r\n    let newItem1 = { ...item1, index: item2.index };\r\n    let newItem2 = { ...item2, index: item1.index };\r\n    todos[item1.index] = newItem2;\r\n    todos[item2.index] = newItem1;\r\n    setTodos([...todos]);\r\n  };\r\n\r\n  return [todos, addTodo, completeTodo, removeTodo, swapTodoItems];\r\n};\r\n","import { useState } from \"react\";\r\n\r\nexport default () => {\r\n  const [authentication, setAuthentication] = useState({\r\n    username: \"\",\r\n    token: \"\",\r\n    profilePic: \"\",\r\n    bio: \"\",\r\n    company: \"\",\r\n    location: \"\",\r\n    email: \"\",\r\n    website: \"\",\r\n    twitter: \"\",\r\n    visibleEmail: \"\",\r\n    visibleEmails: [],\r\n  });\r\n\r\n  /**\r\n   * setToken\r\n   *\r\n   * @param {Object} data - { username, jwt, profilePic }\r\n   *\r\n   * Authentication is processed and we are adding it to App state.\r\n   */\r\n  const setToken = (data) => {\r\n    setAuthentication({\r\n      username: data.username || \"\",\r\n      token: data.jwt || \"\",\r\n      profilePic: data.profilePic || \"\",\r\n      bio: data.bio || \"\",\r\n      company: data.company || \"\",\r\n      location: data.location || \"\",\r\n      email: data.email || \"\",\r\n      website: data.website || \"\",\r\n      twitter: data.twitter || \"\",\r\n      visibleEmail: data.visibleEmail || \"\",\r\n      visibleEmails: data.visibleEmails || [],\r\n    });\r\n  };\r\n\r\n  /**\r\n   * setProfileKey\r\n   *\r\n   * @param {Object} data - Our profile keys and values\r\n   *\r\n   * If we press the save button on our profile page,\r\n   * we iterate through the objects checking if the value has changed.\r\n   *\r\n   * If the value as changed we set our new profile.\r\n   */\r\n  const setProfileKey = (data) => {\r\n    let newAuthentication = { ...authentication };\r\n    const authenticationKeys = Object.keys(newAuthentication);\r\n\r\n    authenticationKeys.forEach((k) => {\r\n      const currentAuthValue = authentication[k];\r\n      const futureAuthValue = data[k] || authentication[k]; // if data[key] is undefined.\r\n      if (currentAuthValue !== futureAuthValue) {\r\n        newAuthentication[k] = futureAuthValue;\r\n      }\r\n    });\r\n\r\n    setAuthentication(newAuthentication);\r\n  };\r\n\r\n  return [authentication, setToken, setProfileKey];\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\n\n// Simple styling we will be going for:\n// https://www.w3schools.com/howto/howto_js_todolist.asp\n\n// Testing\n// Spacing on larger screens.\n\n// 404 Page\n// Login / Authentication.\n// Profile Page\n// List of items TodoItems for edit.\n// Ability to change email/password.\n// Verify account.\n// Delete account.\n\n// On the deploy file, redirect to the '/' instead of having http://vilaj46.github.io/glorified-todo?\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Route to=\"/\" exact component={App} />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}